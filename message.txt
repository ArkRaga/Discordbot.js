Message {
  channel: TextChannel {
    type: 'text',
    deleted: false,
    id: '605871435147247801',
    name: 'general',
    rawPosition: 0,
    parentID: '605871435143053503',
    permissionOverwrites: Collection [Map] {},
    topic: null,
    lastMessageID: '797236275336970241',
    rateLimitPerUser: 0,
    lastPinTimestamp: null,
    guild: Guild {
      members: [GuildMemberManager],
      channels: [GuildChannelManager],
      roles: [RoleManager],
      presences: [PresenceManager],
      voiceStates: [VoiceStateManager],
      deleted: false,
      available: true,
      id: '605871435134664848',
      shardID: 0,
      name: 'BotTestingGround',
      icon: null,
      splash: null,
      discoverySplash: null,
      region: 'us-central',
      memberCount: 11,
      large: false,
      features: [],
      applicationID: null,
      afkTimeout: 300,
      afkChannelID: null,
      systemChannelID: '605871435147247801',
      embedEnabled: undefined,
      premiumTier: 0,
      premiumSubscriptionCount: 0,
      verificationLevel: 'NONE',
      explicitContentFilter: 'DISABLED',
      mfaLevel: 0,
      joinedTimestamp: 1608937406669,
      defaultMessageNotifications: 'ALL',
      systemChannelFlags: [SystemChannelFlags],
      maximumMembers: 100000,
      maximumPresences: null,
      approximateMemberCount: null,
      approximatePresenceCount: null,
      vanityURLCode: null,
      vanityURLUses: null,
      description: null,
      banner: null,
      rulesChannelID: null,
      publicUpdatesChannelID: null,
      preferredLocale: 'en-US',
      ownerID: '595632750342569985',
      emojis: [GuildEmojiManager]
    },
    messages: MessageManager {
      cacheType: [Function: LimitedCollection],
      cache: [LimitedCollection [Map]],
      channel: [Circular]
    },
    nsfw: false,
    _typing: Map { '595632750342569985' => [Object] }
  },
  deleted: false,
  id: '797236275336970241',
  type: 'DEFAULT',
  system: false,
  content: '!printusers',
  author: User {
    id: '595632750342569985',
    system: null,
    locale: null,
    flags: UserFlags { bitfield: 0 },
    username: 'Arkraga',
    bot: false,
    discriminator: '3403',
    avatar: 'f92f9d6f74cfbd56f85d5b218580eb78',
    lastMessageID: '797236275336970241',
    lastMessageChannelID: '605871435147247801'
  },
  pinned: false,
  tts: false,
  nonce: '797236274523013120',
  embeds: [],
  attachments: Collection [Map] {},
  createdTimestamp: 1610146339974,
  editedTimestamp: 0,
  reactions: ReactionManager {
    cacheType: [Function: Collection],
    cache: Collection [Map] {},
    message: [Circular]
  },
  mentions: MessageMentions {
    everyone: false,
    users: Collection [Map] {},
    roles: Collection [Map] {},
    _members: null,
    _channels: null,
    crosspostedChannels: Collection [Map] {}
  },
  webhookID: null,
  application: null,
  activity: null,
  _edits: [],
  flags: MessageFlags { bitfield: 0 },
  reference: null
}







const dungeonCombat = async (message, monster) => {
  const combat = setUpCombat(message, monster);
  let combatMsg = "",
    turnMsg = "",
    endMsg = "";
  while (combat.checkHp()) {
    combat.player.damage = Math.round(Math.random() * 4 + 0);
    // combat.enemy.damage = Math.round(Math.random() * 1 + 0);
    combat.enemy.damage = Math.round(Math.random() * combat.enemy.dmg + 0);
    let playerAction = playerActions[Math.round(Math.random() * 2 + 0)];
    // let playerAction = playerActions[2];
    let enemyAction =
      Math.round(Math.random() * 100) > 75 ? enemyActions[1] : enemyActions[0];
    let playercrit = Math.round(Math.random() * 100 + 0) > 90 ? true : false;
    let enemycrit = Math.round(Math.random() * 100 + 0) > 90 ? true : false;

    combat.changeTurn();
    turnMsg = combat.turn;
    //do both peoples turns
    combatMsg +=
      `\n` +
      `Turn: ${combat.turn}\n` +
      doPlayersTurn(combat, "player", "enemy", playercrit, playerAction) +
      doPlayersTurn(combat, "enemy", "player", enemycrit, enemyAction) +
      `${combat.player.name} Hp: ${combat.player.hp} \\|| ${combat.enemy.name} Hp: ${combat.enemy.hp}\n`;
    //add to the message
  }
  combat.player.class.attacks.forEach((x) => x.doReset());
  let color = combat.winner === combat.player.name ? "75f542" : "bf0808";
  const embed = new Discord.MessageEmbed()
    .setColor(color)
    .attachFiles(`./gfxs/${combat.enemy.name}.png`)
    .setThumbnail(`attachment://${combat.enemy.name}.png`)
    .setTitle(`${combat.player.name} VS ${combat.enemy.name}`)
    .setDescription(combatMsg);
  combats.removecombat(combat);

  if (combat.winner === combat.player.name) {
    let msg1 = "you gained: \n";
    inventorys.addInventory(message.author.id, message.author.username);
    const inven = inventorys.getInventory(message.author.id);
    combat.enemy.drops.forEach((x) => {
      msg1 += ` **${x.name}** x${x.quantity}\n`;
      inven.addItem(x);
    });
    embed.addFields({ name: `${combat.player.name} has won!`, value: msg1 });
    await message.channel.send(embed);
    return await dungeonCommands.onRoomDone(message);
  } else {
    const emn = require("../embeds");
    const em = Object.create(emn.rpgCombatEndEmbed);
    em.setColor("D0021B");
    em.attachFiles(`./gfxs/Rip.png`).setImage(`attachment://Rip.png`);
    em.setTitle(`the ${combat.winner} has won the fight`);
    em.setDescription(
      "You have been removed from the Dungeon, come back stronger"
    );
    dungeonHandler.deleteDungeon(message.author.id);
    await message.channel.send(embed);
    return await message.channel.send(em);
  }
};






get guild roles, and check is someone has a role by id or name
 console.log(message.guild.roles.cache.get(message.member._roles[0]).name);
  let m = "";
  message.guild.roles.cache.forEach((ele) => {
    m += `${ele.name}\n`;
  });
  console.log(m);
  if (message.member._roles.find((x) => x == "605886438147489795")) {
    message.channel.send("yeah you got it");
  }
  return console.log(message.member._roles);